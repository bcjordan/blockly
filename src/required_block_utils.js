var xml = require('./xml');
var blockUtils = require('./block_utils');

/**
 * Create the textual XML for a math_number block.
 * @param {number|string} number The numeric amount, expressed as a
 *     number or string.  Non-numeric strings may also be specified,
 *     such as '???'.
 * @return {string} The textual representation of a math_number block.
 */
exports.makeMathNumber = function(number) {
  return '<block type="math_number"><title name="NUM">' +
    number + '</title></block>';
};

/**
 * Generate a required blocks dictionary for a simple block that does not
 * have any parameters or values.
 * @param {string} block_type The block type.
 * @return {Object} A required blocks dictionary able to check for and
 *     generate the specified block.
 */
exports.simpleBlock = function(block_type) {
  return {test: function(block) {return block.type == block_type; },
    type: block_type};
};

exports.simpleBlockWithParam = function(block_type, param) {
  return {test: function(block) {return block.type == block_type; },
    type: block_type, values: {param: '<block type="colour_random"></block>'}};
};

/**
 * Generate a required blocks dictionary for a repeat loop.  This does not
 * test for the specified repeat count but includes it in the suggested block.
 * @param {number|string} count The suggested repeat count.
 * @return {Object} A required blocks dictionary able to check for and
 *     generate the specified block.
 */
exports.repeat = function(count) {
  // This checks for a controls_repeat block rather than looking for 'for',
  // since the latter may be generated by Turtle 2's draw_a_square.
  return {test: function(block) {return block.type == 'controls_repeat';},
    type: 'controls_repeat', titles: {'TIMES': count}};
};

/**
 * Generate a required blocks dictionary for a simple repeat loop.  This does not
 * test for the specified repeat count but includes it in the suggested block.
 * @param {number|string} count The suggested repeat count.
 * @return {Object} A required blocks dictionary able to check for and
 *     generate the specified block.
 */
exports.repeatSimpleBlock = function(count) {
  return {test: function(block) {return block.type == 'controls_repeat_simplified';},
    type: 'controls_repeat_simplified', titles: {'TIMES': count}};
};

/**
 * Returns an array of required blocks by comparing a list of blocks with
 * a list of app specific block tests (defined in <app>/requiredBlocks.js)
 */
exports.makeTestsFromBuilderRequiredBlocks = function (customRequiredBlocks) {
  var blocksXml = xml.parseElement(customRequiredBlocks);

  var requiredBlocksTests = [];
  Array.prototype.forEach.call(blocksXml.children, function(requiredBlockXML) {
    requiredBlocksTests.push([{
      test: function(userBlock) {
        var temporaryRequiredBlock = blockUtils.domToBlock(requiredBlockXML);
        var blockMeetsRequirements = exports.blockMeetsRequirements(userBlock, temporaryRequiredBlock);
        temporaryRequiredBlock.dispose();
        return blockMeetsRequirements;
      },
      blockDisplayXML: xml.serialize(requiredBlockXML)
    }]);
  });

  return requiredBlocksTests;
};

/**
 * Compares a given block with a requiredBlock XML
 * @param userBlock
 * @param requiredBlock
 */
exports.blockMeetsRequirements = function(userBlock, requiredBlock) {
  var typesMatch = requiredBlock.type == userBlock.type;
  var titlesMatch = exports.titlesMatch(userBlock, requiredBlock);
  return typesMatch && titlesMatch;
};

/**
 * Compares two blocks' titles, returns true if they all match
 * @returns {boolean}
 * @param userBlock
 * @param requiredBlock
 */
exports.titlesMatch = function(userBlock, requiredBlock) {
  var userTitles = userBlock.getTitles();
  var requiredTitles = requiredBlock.getTitles();

  if (userTitles.length === 0 && requiredTitles.length === 0) {
    return true;
  }

  for (var i = 0; i < requiredTitles.length; i++) {
    var requiredTitle = requiredTitles[i];
    var titleValuesMatch = userTitles.some(exports.generateTitleMatchChecker_(requiredTitle));
    if (!titleValuesMatch) {
      return false;
    }
  }
  return true;
};

exports.generateTitleMatchChecker_ = function(requiredTitle) {
  return function (userTitle) {
    return requiredTitle.name == userTitle.name &&
      requiredTitle.getValue() == userTitle.getValue();
  };
};
